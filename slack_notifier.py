#!/usr/bin/env python3
"""
Slack Notification Component for GitHub Repository Summary Bot

Sends repository summaries to Slack channels using webhooks.
"""

import json
import requests
from typing import Optional, Dict, Any
from datetime import datetime


class SlackNotifier:
    def __init__(self, webhook_url: str, channel: Optional[str] = None):
        """
        Initialize Slack notifier

        Args:
            webhook_url: Slack webhook URL for sending messages
            channel: Optional channel name (if not configured in webhook)
        """
        self.webhook_url = webhook_url
        self.channel = channel

    def format_summary_message(self, repo_name: str, summary: str, changes_count: int, timestamp: str) -> Dict[str, Any]:
        """
        Format repository summary as Slack message

        Args:
            repo_name: Name of the repository
            summary: AI-generated summary
            changes_count: Number of changes found
            timestamp: When the summary was generated

        Returns:
            Slack message payload
        """
        # Parse timestamp for better formatting
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            formatted_time = dt.strftime('%Y-%m-%d %H:%M UTC')
        except:
            formatted_time = timestamp

        # Create message blocks for better formatting
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"üìä Repository Update: {repo_name}"
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Changes:* {changes_count}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Generated:* {formatted_time}"
                    }
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": summary
                }
            },
            {
                "type": "context",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": f"ü§ñ Generated by GitHub Repository Summary Bot"
                    }
                ]
            }
        ]

        payload = {
            "blocks": blocks
        }

        # Add channel if specified
        if self.channel:
            payload["channel"] = self.channel

        return payload

    def send_summary(self, repo_name: str, summary: str, changes_count: int, timestamp: str) -> bool:
        """
        Send repository summary to Slack

        Args:
            repo_name: Name of the repository
            summary: AI-generated summary
            changes_count: Number of changes found
            timestamp: When the summary was generated

        Returns:
            True if message was sent successfully, False otherwise
        """
        try:
            payload = self.format_summary_message(repo_name, summary, changes_count, timestamp)

            response = requests.post(
                self.webhook_url,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )

            if response.status_code == 200:
                print(f"‚úÖ Slack notification sent for {repo_name}")
                return True
            else:
                print(f"‚ùå Failed to send Slack notification for {repo_name}: {response.status_code} - {response.text}")
                return False

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error sending Slack notification for {repo_name}: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Unexpected error sending Slack notification for {repo_name}: {e}")
            return False

    def send_bulk_summary(self, summaries: list) -> Dict[str, int]:
        """
        Send multiple repository summaries to Slack

        Args:
            summaries: List of summary dictionaries with repo_name, summary, changes_count, timestamp

        Returns:
            Dictionary with 'sent' and 'failed' counts
        """
        results = {"sent": 0, "failed": 0}

        for summary_data in summaries:
            success = self.send_summary(
                summary_data["repo_name"],
                summary_data["summary"],
                summary_data["changes_count"],
                summary_data["timestamp"]
            )

            if success:
                results["sent"] += 1
            else:
                results["failed"] += 1

        return results

    def test_connection(self) -> bool:
        """
        Test Slack webhook connection with a simple message

        Returns:
            True if connection successful, False otherwise
        """
        test_payload = {
            "text": "üß™ Test message from GitHub Repository Summary Bot",
            "blocks": [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "‚úÖ Slack webhook connection is working! You should start receiving repository summaries here."
                    }
                }
            ]
        }

        if self.channel:
            test_payload["channel"] = self.channel

        try:
            response = requests.post(
                self.webhook_url,
                json=test_payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )

            if response.status_code == 200:
                print("‚úÖ Slack webhook test successful")
                return True
            else:
                print(f"‚ùå Slack webhook test failed: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            print(f"‚ùå Slack webhook test error: {e}")
            return False